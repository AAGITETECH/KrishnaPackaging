#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KrishnaPackaging.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KrishnaPackaging")]
	public partial class KrishnaPackagingDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompanyMaster(CompanyMaster instance);
    partial void UpdateCompanyMaster(CompanyMaster instance);
    partial void DeleteCompanyMaster(CompanyMaster instance);
    partial void InsertWasteMaster(WasteMaster instance);
    partial void UpdateWasteMaster(WasteMaster instance);
    partial void DeleteWasteMaster(WasteMaster instance);
    partial void InsertConsumptionDetail(ConsumptionDetail instance);
    partial void UpdateConsumptionDetail(ConsumptionDetail instance);
    partial void DeleteConsumptionDetail(ConsumptionDetail instance);
    partial void InsertConsumptionMaster(ConsumptionMaster instance);
    partial void UpdateConsumptionMaster(ConsumptionMaster instance);
    partial void DeleteConsumptionMaster(ConsumptionMaster instance);
    partial void InsertDispatchDetail(DispatchDetail instance);
    partial void UpdateDispatchDetail(DispatchDetail instance);
    partial void DeleteDispatchDetail(DispatchDetail instance);
    partial void InsertDispatchMaster(DispatchMaster instance);
    partial void UpdateDispatchMaster(DispatchMaster instance);
    partial void DeleteDispatchMaster(DispatchMaster instance);
    partial void InsertExpenseDetail(ExpenseDetail instance);
    partial void UpdateExpenseDetail(ExpenseDetail instance);
    partial void DeleteExpenseDetail(ExpenseDetail instance);
    partial void InsertExpenseMaster(ExpenseMaster instance);
    partial void UpdateExpenseMaster(ExpenseMaster instance);
    partial void DeleteExpenseMaster(ExpenseMaster instance);
    partial void InsertFormMaster(FormMaster instance);
    partial void UpdateFormMaster(FormMaster instance);
    partial void DeleteFormMaster(FormMaster instance);
    partial void InsertInwardMaster(InwardMaster instance);
    partial void UpdateInwardMaster(InwardMaster instance);
    partial void DeleteInwardMaster(InwardMaster instance);
    partial void InsertItemMaster(ItemMaster instance);
    partial void UpdateItemMaster(ItemMaster instance);
    partial void DeleteItemMaster(ItemMaster instance);
    partial void InsertMachineMaster(MachineMaster instance);
    partial void UpdateMachineMaster(MachineMaster instance);
    partial void DeleteMachineMaster(MachineMaster instance);
    partial void InsertMixingMaster(MixingMaster instance);
    partial void UpdateMixingMaster(MixingMaster instance);
    partial void DeleteMixingMaster(MixingMaster instance);
    partial void InsertPartyMaster(PartyMaster instance);
    partial void UpdatePartyMaster(PartyMaster instance);
    partial void DeletePartyMaster(PartyMaster instance);
    partial void InsertProductionDetail(ProductionDetail instance);
    partial void UpdateProductionDetail(ProductionDetail instance);
    partial void DeleteProductionDetail(ProductionDetail instance);
    partial void InsertProductionMaster(ProductionMaster instance);
    partial void UpdateProductionMaster(ProductionMaster instance);
    partial void DeleteProductionMaster(ProductionMaster instance);
    partial void InsertReceiveNoteDetail(ReceiveNoteDetail instance);
    partial void UpdateReceiveNoteDetail(ReceiveNoteDetail instance);
    partial void DeleteReceiveNoteDetail(ReceiveNoteDetail instance);
    partial void InsertReceiveNoteMaster(ReceiveNoteMaster instance);
    partial void UpdateReceiveNoteMaster(ReceiveNoteMaster instance);
    partial void DeleteReceiveNoteMaster(ReceiveNoteMaster instance);
    partial void InsertRewinderDetail(RewinderDetail instance);
    partial void UpdateRewinderDetail(RewinderDetail instance);
    partial void DeleteRewinderDetail(RewinderDetail instance);
    partial void InsertRewinderMaster(RewinderMaster instance);
    partial void UpdateRewinderMaster(RewinderMaster instance);
    partial void DeleteRewinderMaster(RewinderMaster instance);
    partial void InsertUserMaster(UserMaster instance);
    partial void UpdateUserMaster(UserMaster instance);
    partial void DeleteUserMaster(UserMaster instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    #endregion
		
		public KrishnaPackagingDbDataContext() : 
				base(global::KrishnaPackaging.Properties.Settings.Default.KrishnaPackagingConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public KrishnaPackagingDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KrishnaPackagingDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KrishnaPackagingDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KrishnaPackagingDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CompanyMaster> CompanyMasters
		{
			get
			{
				return this.GetTable<CompanyMaster>();
			}
		}
		
		public System.Data.Linq.Table<WasteMaster> WasteMasters
		{
			get
			{
				return this.GetTable<WasteMaster>();
			}
		}
		
		public System.Data.Linq.Table<ConsumptionDetail> ConsumptionDetails
		{
			get
			{
				return this.GetTable<ConsumptionDetail>();
			}
		}
		
		public System.Data.Linq.Table<ConsumptionMaster> ConsumptionMasters
		{
			get
			{
				return this.GetTable<ConsumptionMaster>();
			}
		}
		
		public System.Data.Linq.Table<DispatchDetail> DispatchDetails
		{
			get
			{
				return this.GetTable<DispatchDetail>();
			}
		}
		
		public System.Data.Linq.Table<DispatchMaster> DispatchMasters
		{
			get
			{
				return this.GetTable<DispatchMaster>();
			}
		}
		
		public System.Data.Linq.Table<ExpenseDetail> ExpenseDetails
		{
			get
			{
				return this.GetTable<ExpenseDetail>();
			}
		}
		
		public System.Data.Linq.Table<ExpenseMaster> ExpenseMasters
		{
			get
			{
				return this.GetTable<ExpenseMaster>();
			}
		}
		
		public System.Data.Linq.Table<FormMaster> FormMasters
		{
			get
			{
				return this.GetTable<FormMaster>();
			}
		}
		
		public System.Data.Linq.Table<InwardMaster> InwardMasters
		{
			get
			{
				return this.GetTable<InwardMaster>();
			}
		}
		
		public System.Data.Linq.Table<ItemMaster> ItemMasters
		{
			get
			{
				return this.GetTable<ItemMaster>();
			}
		}
		
		public System.Data.Linq.Table<MachineMaster> MachineMasters
		{
			get
			{
				return this.GetTable<MachineMaster>();
			}
		}
		
		public System.Data.Linq.Table<MixingMaster> MixingMasters
		{
			get
			{
				return this.GetTable<MixingMaster>();
			}
		}
		
		public System.Data.Linq.Table<PartyMaster> PartyMasters
		{
			get
			{
				return this.GetTable<PartyMaster>();
			}
		}
		
		public System.Data.Linq.Table<ProductionDetail> ProductionDetails
		{
			get
			{
				return this.GetTable<ProductionDetail>();
			}
		}
		
		public System.Data.Linq.Table<ProductionMaster> ProductionMasters
		{
			get
			{
				return this.GetTable<ProductionMaster>();
			}
		}
		
		public System.Data.Linq.Table<ReceiveNoteDetail> ReceiveNoteDetails
		{
			get
			{
				return this.GetTable<ReceiveNoteDetail>();
			}
		}
		
		public System.Data.Linq.Table<ReceiveNoteMaster> ReceiveNoteMasters
		{
			get
			{
				return this.GetTable<ReceiveNoteMaster>();
			}
		}
		
		public System.Data.Linq.Table<RewinderDetail> RewinderDetails
		{
			get
			{
				return this.GetTable<RewinderDetail>();
			}
		}
		
		public System.Data.Linq.Table<RewinderMaster> RewinderMasters
		{
			get
			{
				return this.GetTable<RewinderMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserMaster> UserMasters
		{
			get
			{
				return this.GetTable<UserMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UserSignIn")]
		public ISingleResult<UserSignInResult> UserSignIn([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="NVarChar(100)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(100)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, password);
			return ((ISingleResult<UserSignInResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyMaster")]
	public partial class CompanyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CompanyId;
		
		private string _CompanyName;
		
		private string _PersonName;
		
		private string _BillingAddress;
		
		private string _DeliveryAddress;
		
		private string _City;
		
		private string _State;
		
		private string _StateCode;
		
		private string _Country;
		
		private string _ContactNo;
		
		private string _Email;
		
		private string _Website;
		
		private string _GSTIN;
		
		private string _PANNo;
		
		private System.Data.Linq.Binary _LogoImg;
		
		private string _ImageFile;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntitySet<WasteMaster> _WasteMasters;
		
		private EntitySet<ConsumptionMaster> _ConsumptionMasters;
		
		private EntitySet<DispatchMaster> _DispatchMasters;
		
		private EntitySet<ExpenseDetail> _ExpenseDetails;
		
		private EntitySet<ExpenseMaster> _ExpenseMasters;
		
		private EntitySet<InwardMaster> _InwardMasters;
		
		private EntitySet<ItemMaster> _ItemMasters;
		
		private EntitySet<MachineMaster> _MachineMasters;
		
		private EntitySet<MixingMaster> _MixingMasters;
		
		private EntitySet<PartyMaster> _PartyMasters;
		
		private EntitySet<ProductionMaster> _ProductionMasters;
		
		private EntitySet<ReceiveNoteDetail> _ReceiveNoteDetails;
		
		private EntitySet<ReceiveNoteMaster> _ReceiveNoteMasters;
		
		private EntitySet<RewinderMaster> _RewinderMasters;
		
		private EntitySet<UserMaster> _UserMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnPersonNameChanging(string value);
    partial void OnPersonNameChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnGSTINChanging(string value);
    partial void OnGSTINChanged();
    partial void OnPANNoChanging(string value);
    partial void OnPANNoChanged();
    partial void OnLogoImgChanging(System.Data.Linq.Binary value);
    partial void OnLogoImgChanged();
    partial void OnImageFileChanging(string value);
    partial void OnImageFileChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public CompanyMaster()
		{
			this._WasteMasters = new EntitySet<WasteMaster>(new Action<WasteMaster>(this.attach_WasteMasters), new Action<WasteMaster>(this.detach_WasteMasters));
			this._ConsumptionMasters = new EntitySet<ConsumptionMaster>(new Action<ConsumptionMaster>(this.attach_ConsumptionMasters), new Action<ConsumptionMaster>(this.detach_ConsumptionMasters));
			this._DispatchMasters = new EntitySet<DispatchMaster>(new Action<DispatchMaster>(this.attach_DispatchMasters), new Action<DispatchMaster>(this.detach_DispatchMasters));
			this._ExpenseDetails = new EntitySet<ExpenseDetail>(new Action<ExpenseDetail>(this.attach_ExpenseDetails), new Action<ExpenseDetail>(this.detach_ExpenseDetails));
			this._ExpenseMasters = new EntitySet<ExpenseMaster>(new Action<ExpenseMaster>(this.attach_ExpenseMasters), new Action<ExpenseMaster>(this.detach_ExpenseMasters));
			this._InwardMasters = new EntitySet<InwardMaster>(new Action<InwardMaster>(this.attach_InwardMasters), new Action<InwardMaster>(this.detach_InwardMasters));
			this._ItemMasters = new EntitySet<ItemMaster>(new Action<ItemMaster>(this.attach_ItemMasters), new Action<ItemMaster>(this.detach_ItemMasters));
			this._MachineMasters = new EntitySet<MachineMaster>(new Action<MachineMaster>(this.attach_MachineMasters), new Action<MachineMaster>(this.detach_MachineMasters));
			this._MixingMasters = new EntitySet<MixingMaster>(new Action<MixingMaster>(this.attach_MixingMasters), new Action<MixingMaster>(this.detach_MixingMasters));
			this._PartyMasters = new EntitySet<PartyMaster>(new Action<PartyMaster>(this.attach_PartyMasters), new Action<PartyMaster>(this.detach_PartyMasters));
			this._ProductionMasters = new EntitySet<ProductionMaster>(new Action<ProductionMaster>(this.attach_ProductionMasters), new Action<ProductionMaster>(this.detach_ProductionMasters));
			this._ReceiveNoteDetails = new EntitySet<ReceiveNoteDetail>(new Action<ReceiveNoteDetail>(this.attach_ReceiveNoteDetails), new Action<ReceiveNoteDetail>(this.detach_ReceiveNoteDetails));
			this._ReceiveNoteMasters = new EntitySet<ReceiveNoteMaster>(new Action<ReceiveNoteMaster>(this.attach_ReceiveNoteMasters), new Action<ReceiveNoteMaster>(this.detach_ReceiveNoteMasters));
			this._RewinderMasters = new EntitySet<RewinderMaster>(new Action<RewinderMaster>(this.attach_RewinderMasters), new Action<RewinderMaster>(this.detach_RewinderMasters));
			this._UserMasters = new EntitySet<UserMaster>(new Action<UserMaster>(this.attach_UserMasters), new Action<UserMaster>(this.detach_UserMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(150)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(150)")]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this.OnPersonNameChanging(value);
					this.SendPropertyChanging();
					this._PersonName = value;
					this.SendPropertyChanged("PersonName");
					this.OnPersonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NVarChar(1000)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(1000)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="NVarChar(10)")]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(150)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GSTIN", DbType="NVarChar(50)")]
		public string GSTIN
		{
			get
			{
				return this._GSTIN;
			}
			set
			{
				if ((this._GSTIN != value))
				{
					this.OnGSTINChanging(value);
					this.SendPropertyChanging();
					this._GSTIN = value;
					this.SendPropertyChanged("GSTIN");
					this.OnGSTINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PANNo", DbType="NVarChar(20)")]
		public string PANNo
		{
			get
			{
				return this._PANNo;
			}
			set
			{
				if ((this._PANNo != value))
				{
					this.OnPANNoChanging(value);
					this.SendPropertyChanging();
					this._PANNo = value;
					this.SendPropertyChanged("PANNo");
					this.OnPANNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoImg", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LogoImg
		{
			get
			{
				return this._LogoImg;
			}
			set
			{
				if ((this._LogoImg != value))
				{
					this.OnLogoImgChanging(value);
					this.SendPropertyChanging();
					this._LogoImg = value;
					this.SendPropertyChanged("LogoImg");
					this.OnLogoImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile", DbType="NVarChar(150)")]
		public string ImageFile
		{
			get
			{
				return this._ImageFile;
			}
			set
			{
				if ((this._ImageFile != value))
				{
					this.OnImageFileChanging(value);
					this.SendPropertyChanging();
					this._ImageFile = value;
					this.SendPropertyChanged("ImageFile");
					this.OnImageFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_WasteMaster", Storage="_WasteMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<WasteMaster> WasteMasters
		{
			get
			{
				return this._WasteMasters;
			}
			set
			{
				this._WasteMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ConsumptionMaster", Storage="_ConsumptionMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ConsumptionMaster> ConsumptionMasters
		{
			get
			{
				return this._ConsumptionMasters;
			}
			set
			{
				this._ConsumptionMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_DispatchMaster", Storage="_DispatchMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<DispatchMaster> DispatchMasters
		{
			get
			{
				return this._DispatchMasters;
			}
			set
			{
				this._DispatchMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ExpenseDetail", Storage="_ExpenseDetails", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ExpenseDetail> ExpenseDetails
		{
			get
			{
				return this._ExpenseDetails;
			}
			set
			{
				this._ExpenseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ExpenseMaster", Storage="_ExpenseMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ExpenseMaster> ExpenseMasters
		{
			get
			{
				return this._ExpenseMasters;
			}
			set
			{
				this._ExpenseMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_InwardMaster", Storage="_InwardMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<InwardMaster> InwardMasters
		{
			get
			{
				return this._InwardMasters;
			}
			set
			{
				this._InwardMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ItemMaster", Storage="_ItemMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ItemMaster> ItemMasters
		{
			get
			{
				return this._ItemMasters;
			}
			set
			{
				this._ItemMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_MachineMaster", Storage="_MachineMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<MachineMaster> MachineMasters
		{
			get
			{
				return this._MachineMasters;
			}
			set
			{
				this._MachineMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_MixingMaster", Storage="_MixingMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<MixingMaster> MixingMasters
		{
			get
			{
				return this._MixingMasters;
			}
			set
			{
				this._MixingMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_PartyMaster", Storage="_PartyMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<PartyMaster> PartyMasters
		{
			get
			{
				return this._PartyMasters;
			}
			set
			{
				this._PartyMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ProductionMaster", Storage="_ProductionMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ProductionMaster> ProductionMasters
		{
			get
			{
				return this._ProductionMasters;
			}
			set
			{
				this._ProductionMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ReceiveNoteDetail", Storage="_ReceiveNoteDetails", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ReceiveNoteDetail> ReceiveNoteDetails
		{
			get
			{
				return this._ReceiveNoteDetails;
			}
			set
			{
				this._ReceiveNoteDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ReceiveNoteMaster", Storage="_ReceiveNoteMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<ReceiveNoteMaster> ReceiveNoteMasters
		{
			get
			{
				return this._ReceiveNoteMasters;
			}
			set
			{
				this._ReceiveNoteMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_RewinderMaster", Storage="_RewinderMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<RewinderMaster> RewinderMasters
		{
			get
			{
				return this._RewinderMasters;
			}
			set
			{
				this._RewinderMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_UserMaster", Storage="_UserMasters", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<UserMaster> UserMasters
		{
			get
			{
				return this._UserMasters;
			}
			set
			{
				this._UserMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WasteMasters(WasteMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_WasteMasters(WasteMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ConsumptionMasters(ConsumptionMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ConsumptionMasters(ConsumptionMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_DispatchMasters(DispatchMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_DispatchMasters(DispatchMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ExpenseMasters(ExpenseMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ExpenseMasters(ExpenseMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ItemMasters(ItemMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ItemMasters(ItemMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_MachineMasters(MachineMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_MachineMasters(MachineMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_PartyMasters(PartyMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_PartyMasters(PartyMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ProductionMasters(ProductionMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ProductionMasters(ProductionMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_ReceiveNoteMasters(ReceiveNoteMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_ReceiveNoteMasters(ReceiveNoteMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_RewinderMasters(RewinderMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_RewinderMasters(RewinderMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
		
		private void attach_UserMasters(UserMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = this;
		}
		
		private void detach_UserMasters(UserMaster entity)
		{
			this.SendPropertyChanging();
			entity.CompanyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WasteMaster")]
	public partial class WasteMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _WMId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<long> _MachineId;
		
		private System.Nullable<decimal> _WasteQty;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<MachineMaster> _MachineMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWMIdChanging(long value);
    partial void OnWMIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnMachineIdChanging(System.Nullable<long> value);
    partial void OnMachineIdChanged();
    partial void OnWasteQtyChanging(System.Nullable<decimal> value);
    partial void OnWasteQtyChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public WasteMaster()
		{
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._MachineMaster = default(EntityRef<MachineMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long WMId
		{
			get
			{
				return this._WMId;
			}
			set
			{
				if ((this._WMId != value))
				{
					this.OnWMIdChanging(value);
					this.SendPropertyChanging();
					this._WMId = value;
					this.SendPropertyChanged("WMId");
					this.OnWMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineId", DbType="BigInt")]
		public System.Nullable<long> MachineId
		{
			get
			{
				return this._MachineId;
			}
			set
			{
				if ((this._MachineId != value))
				{
					if (this._MachineMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIdChanging(value);
					this.SendPropertyChanging();
					this._MachineId = value;
					this.SendPropertyChanged("MachineId");
					this.OnMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasteQty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> WasteQty
		{
			get
			{
				return this._WasteQty;
			}
			set
			{
				if ((this._WasteQty != value))
				{
					this.OnWasteQtyChanging(value);
					this.SendPropertyChanging();
					this._WasteQty = value;
					this.SendPropertyChanged("WasteQty");
					this.OnWasteQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_WasteMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.WasteMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.WasteMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_WasteMaster", Storage="_MachineMaster", ThisKey="MachineId", OtherKey="MachinId", IsForeignKey=true)]
		public MachineMaster MachineMaster
		{
			get
			{
				return this._MachineMaster.Entity;
			}
			set
			{
				MachineMaster previousValue = this._MachineMaster.Entity;
				if (((previousValue != value) 
							|| (this._MachineMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineMaster.Entity = null;
						previousValue.WasteMasters.Remove(this);
					}
					this._MachineMaster.Entity = value;
					if ((value != null))
					{
						value.WasteMasters.Add(this);
						this._MachineId = value.MachinId;
					}
					else
					{
						this._MachineId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MachineMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsumptionDetail")]
	public partial class ConsumptionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ConDId;
		
		private System.Nullable<long> _ConId;
		
		private System.Nullable<long> _IMId;
		
		private System.Nullable<long> _RDId;
		
		private System.Nullable<long> _MMId;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<decimal> _Total;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<ConsumptionMaster> _ConsumptionMaster;
		
		private EntityRef<ItemMaster> _ItemMaster;
		
		private EntityRef<MixingMaster> _MixingMaster;
		
		private EntityRef<RewinderDetail> _RewinderDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConDIdChanging(long value);
    partial void OnConDIdChanged();
    partial void OnConIdChanging(System.Nullable<long> value);
    partial void OnConIdChanged();
    partial void OnIMIdChanging(System.Nullable<long> value);
    partial void OnIMIdChanged();
    partial void OnRDIdChanging(System.Nullable<long> value);
    partial void OnRDIdChanged();
    partial void OnMMIdChanging(System.Nullable<long> value);
    partial void OnMMIdChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public ConsumptionDetail()
		{
			this._ConsumptionMaster = default(EntityRef<ConsumptionMaster>);
			this._ItemMaster = default(EntityRef<ItemMaster>);
			this._MixingMaster = default(EntityRef<MixingMaster>);
			this._RewinderDetail = default(EntityRef<RewinderDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ConDId
		{
			get
			{
				return this._ConDId;
			}
			set
			{
				if ((this._ConDId != value))
				{
					this.OnConDIdChanging(value);
					this.SendPropertyChanging();
					this._ConDId = value;
					this.SendPropertyChanged("ConDId");
					this.OnConDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConId", DbType="BigInt")]
		public System.Nullable<long> ConId
		{
			get
			{
				return this._ConId;
			}
			set
			{
				if ((this._ConId != value))
				{
					if (this._ConsumptionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConIdChanging(value);
					this.SendPropertyChanging();
					this._ConId = value;
					this.SendPropertyChanged("ConId");
					this.OnConIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMId", DbType="BigInt")]
		public System.Nullable<long> IMId
		{
			get
			{
				return this._IMId;
			}
			set
			{
				if ((this._IMId != value))
				{
					if (this._ItemMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMIdChanging(value);
					this.SendPropertyChanging();
					this._IMId = value;
					this.SendPropertyChanged("IMId");
					this.OnIMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RDId", DbType="BigInt")]
		public System.Nullable<long> RDId
		{
			get
			{
				return this._RDId;
			}
			set
			{
				if ((this._RDId != value))
				{
					if (this._RewinderDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRDIdChanging(value);
					this.SendPropertyChanging();
					this._RDId = value;
					this.SendPropertyChanged("RDId");
					this.OnRDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMId", DbType="BigInt")]
		public System.Nullable<long> MMId
		{
			get
			{
				return this._MMId;
			}
			set
			{
				if ((this._MMId != value))
				{
					if (this._MixingMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMMIdChanging(value);
					this.SendPropertyChanging();
					this._MMId = value;
					this.SendPropertyChanged("MMId");
					this.OnMMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumptionMaster_ConsumptionDetail", Storage="_ConsumptionMaster", ThisKey="ConId", OtherKey="ConId", IsForeignKey=true)]
		public ConsumptionMaster ConsumptionMaster
		{
			get
			{
				return this._ConsumptionMaster.Entity;
			}
			set
			{
				ConsumptionMaster previousValue = this._ConsumptionMaster.Entity;
				if (((previousValue != value) 
							|| (this._ConsumptionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConsumptionMaster.Entity = null;
						previousValue.ConsumptionDetails.Remove(this);
					}
					this._ConsumptionMaster.Entity = value;
					if ((value != null))
					{
						value.ConsumptionDetails.Add(this);
						this._ConId = value.ConId;
					}
					else
					{
						this._ConId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ConsumptionMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_ConsumptionDetail", Storage="_ItemMaster", ThisKey="IMId", OtherKey="IMId", IsForeignKey=true)]
		public ItemMaster ItemMaster
		{
			get
			{
				return this._ItemMaster.Entity;
			}
			set
			{
				ItemMaster previousValue = this._ItemMaster.Entity;
				if (((previousValue != value) 
							|| (this._ItemMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemMaster.Entity = null;
						previousValue.ConsumptionDetails.Remove(this);
					}
					this._ItemMaster.Entity = value;
					if ((value != null))
					{
						value.ConsumptionDetails.Add(this);
						this._IMId = value.IMId;
					}
					else
					{
						this._IMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ItemMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MixingMaster_ConsumptionDetail", Storage="_MixingMaster", ThisKey="MMId", OtherKey="MMId", IsForeignKey=true)]
		public MixingMaster MixingMaster
		{
			get
			{
				return this._MixingMaster.Entity;
			}
			set
			{
				MixingMaster previousValue = this._MixingMaster.Entity;
				if (((previousValue != value) 
							|| (this._MixingMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MixingMaster.Entity = null;
						previousValue.ConsumptionDetails.Remove(this);
					}
					this._MixingMaster.Entity = value;
					if ((value != null))
					{
						value.ConsumptionDetails.Add(this);
						this._MMId = value.MMId;
					}
					else
					{
						this._MMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MixingMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewinderDetail_ConsumptionDetail", Storage="_RewinderDetail", ThisKey="RDId", OtherKey="RewDId", IsForeignKey=true)]
		public RewinderDetail RewinderDetail
		{
			get
			{
				return this._RewinderDetail.Entity;
			}
			set
			{
				RewinderDetail previousValue = this._RewinderDetail.Entity;
				if (((previousValue != value) 
							|| (this._RewinderDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RewinderDetail.Entity = null;
						previousValue.ConsumptionDetails.Remove(this);
					}
					this._RewinderDetail.Entity = value;
					if ((value != null))
					{
						value.ConsumptionDetails.Add(this);
						this._RDId = value.RewDId;
					}
					else
					{
						this._RDId = default(Nullable<long>);
					}
					this.SendPropertyChanged("RewinderDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsumptionMaster")]
	public partial class ConsumptionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ConId;
		
		private System.Nullable<long> _MachinId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<ConsumptionDetail> _ConsumptionDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<MachineMaster> _MachineMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConIdChanging(long value);
    partial void OnConIdChanged();
    partial void OnMachinIdChanging(System.Nullable<long> value);
    partial void OnMachinIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ConsumptionMaster()
		{
			this._ConsumptionDetails = new EntitySet<ConsumptionDetail>(new Action<ConsumptionDetail>(this.attach_ConsumptionDetails), new Action<ConsumptionDetail>(this.detach_ConsumptionDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._MachineMaster = default(EntityRef<MachineMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ConId
		{
			get
			{
				return this._ConId;
			}
			set
			{
				if ((this._ConId != value))
				{
					this.OnConIdChanging(value);
					this.SendPropertyChanging();
					this._ConId = value;
					this.SendPropertyChanged("ConId");
					this.OnConIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachinId", DbType="BigInt")]
		public System.Nullable<long> MachinId
		{
			get
			{
				return this._MachinId;
			}
			set
			{
				if ((this._MachinId != value))
				{
					if (this._MachineMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachinIdChanging(value);
					this.SendPropertyChanging();
					this._MachinId = value;
					this.SendPropertyChanged("MachinId");
					this.OnMachinIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumptionMaster_ConsumptionDetail", Storage="_ConsumptionDetails", ThisKey="ConId", OtherKey="ConId")]
		public EntitySet<ConsumptionDetail> ConsumptionDetails
		{
			get
			{
				return this._ConsumptionDetails;
			}
			set
			{
				this._ConsumptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ConsumptionMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ConsumptionMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ConsumptionMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ConsumptionMaster", Storage="_MachineMaster", ThisKey="MachinId", OtherKey="MachinId", IsForeignKey=true)]
		public MachineMaster MachineMaster
		{
			get
			{
				return this._MachineMaster.Entity;
			}
			set
			{
				MachineMaster previousValue = this._MachineMaster.Entity;
				if (((previousValue != value) 
							|| (this._MachineMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineMaster.Entity = null;
						previousValue.ConsumptionMasters.Remove(this);
					}
					this._MachineMaster.Entity = value;
					if ((value != null))
					{
						value.ConsumptionMasters.Add(this);
						this._MachinId = value.MachinId;
					}
					else
					{
						this._MachinId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MachineMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ConsumptionMaster = this;
		}
		
		private void detach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ConsumptionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DispatchDetail")]
	public partial class DispatchDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DDId;
		
		private System.Nullable<long> _DMId;
		
		private System.Nullable<long> _MachineId;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<DispatchMaster> _DispatchMaster;
		
		private EntityRef<MachineMaster> _MachineMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDDIdChanging(long value);
    partial void OnDDIdChanged();
    partial void OnDMIdChanging(System.Nullable<long> value);
    partial void OnDMIdChanged();
    partial void OnMachineIdChanging(System.Nullable<long> value);
    partial void OnMachineIdChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public DispatchDetail()
		{
			this._DispatchMaster = default(EntityRef<DispatchMaster>);
			this._MachineMaster = default(EntityRef<MachineMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DDId
		{
			get
			{
				return this._DDId;
			}
			set
			{
				if ((this._DDId != value))
				{
					this.OnDDIdChanging(value);
					this.SendPropertyChanging();
					this._DDId = value;
					this.SendPropertyChanged("DDId");
					this.OnDDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMId", DbType="BigInt")]
		public System.Nullable<long> DMId
		{
			get
			{
				return this._DMId;
			}
			set
			{
				if ((this._DMId != value))
				{
					if (this._DispatchMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDMIdChanging(value);
					this.SendPropertyChanging();
					this._DMId = value;
					this.SendPropertyChanged("DMId");
					this.OnDMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineId", DbType="BigInt")]
		public System.Nullable<long> MachineId
		{
			get
			{
				return this._MachineId;
			}
			set
			{
				if ((this._MachineId != value))
				{
					if (this._MachineMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIdChanging(value);
					this.SendPropertyChanging();
					this._MachineId = value;
					this.SendPropertyChanged("MachineId");
					this.OnMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchMaster_DispatchDetail", Storage="_DispatchMaster", ThisKey="DMId", OtherKey="DMId", IsForeignKey=true)]
		public DispatchMaster DispatchMaster
		{
			get
			{
				return this._DispatchMaster.Entity;
			}
			set
			{
				DispatchMaster previousValue = this._DispatchMaster.Entity;
				if (((previousValue != value) 
							|| (this._DispatchMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DispatchMaster.Entity = null;
						previousValue.DispatchDetails.Remove(this);
					}
					this._DispatchMaster.Entity = value;
					if ((value != null))
					{
						value.DispatchDetails.Add(this);
						this._DMId = value.DMId;
					}
					else
					{
						this._DMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("DispatchMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_DispatchDetail", Storage="_MachineMaster", ThisKey="MachineId", OtherKey="MachinId", IsForeignKey=true)]
		public MachineMaster MachineMaster
		{
			get
			{
				return this._MachineMaster.Entity;
			}
			set
			{
				MachineMaster previousValue = this._MachineMaster.Entity;
				if (((previousValue != value) 
							|| (this._MachineMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineMaster.Entity = null;
						previousValue.DispatchDetails.Remove(this);
					}
					this._MachineMaster.Entity = value;
					if ((value != null))
					{
						value.DispatchDetails.Add(this);
						this._MachineId = value.MachinId;
					}
					else
					{
						this._MachineId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MachineMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DispatchMaster")]
	public partial class DispatchMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DMId;
		
		private System.Nullable<long> _PartyId;
		
		private string _DNo;
		
		private string _InvoiceNo;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _VehicleNo;
		
		private string _PartyPoNo;
		
		private System.Nullable<System.DateTime> _PartyPODate;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntitySet<DispatchDetail> _DispatchDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<PartyMaster> _PartyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDMIdChanging(long value);
    partial void OnDMIdChanged();
    partial void OnPartyIdChanging(System.Nullable<long> value);
    partial void OnPartyIdChanged();
    partial void OnDNoChanging(string value);
    partial void OnDNoChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnVehicleNoChanging(string value);
    partial void OnVehicleNoChanged();
    partial void OnPartyPoNoChanging(string value);
    partial void OnPartyPoNoChanged();
    partial void OnPartyPODateChanging(System.Nullable<System.DateTime> value);
    partial void OnPartyPODateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public DispatchMaster()
		{
			this._DispatchDetails = new EntitySet<DispatchDetail>(new Action<DispatchDetail>(this.attach_DispatchDetails), new Action<DispatchDetail>(this.detach_DispatchDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._PartyMaster = default(EntityRef<PartyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DMId
		{
			get
			{
				return this._DMId;
			}
			set
			{
				if ((this._DMId != value))
				{
					this.OnDMIdChanging(value);
					this.SendPropertyChanging();
					this._DMId = value;
					this.SendPropertyChanged("DMId");
					this.OnDMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyId", DbType="BigInt")]
		public System.Nullable<long> PartyId
		{
			get
			{
				return this._PartyId;
			}
			set
			{
				if ((this._PartyId != value))
				{
					if (this._PartyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIdChanging(value);
					this.SendPropertyChanging();
					this._PartyId = value;
					this.SendPropertyChanged("PartyId");
					this.OnPartyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNo", DbType="NVarChar(50)")]
		public string DNo
		{
			get
			{
				return this._DNo;
			}
			set
			{
				if ((this._DNo != value))
				{
					this.OnDNoChanging(value);
					this.SendPropertyChanging();
					this._DNo = value;
					this.SendPropertyChanged("DNo");
					this.OnDNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(50)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleNo", DbType="NVarChar(50)")]
		public string VehicleNo
		{
			get
			{
				return this._VehicleNo;
			}
			set
			{
				if ((this._VehicleNo != value))
				{
					this.OnVehicleNoChanging(value);
					this.SendPropertyChanging();
					this._VehicleNo = value;
					this.SendPropertyChanged("VehicleNo");
					this.OnVehicleNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyPoNo", DbType="NVarChar(50)")]
		public string PartyPoNo
		{
			get
			{
				return this._PartyPoNo;
			}
			set
			{
				if ((this._PartyPoNo != value))
				{
					this.OnPartyPoNoChanging(value);
					this.SendPropertyChanging();
					this._PartyPoNo = value;
					this.SendPropertyChanged("PartyPoNo");
					this.OnPartyPoNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyPODate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PartyPODate
		{
			get
			{
				return this._PartyPODate;
			}
			set
			{
				if ((this._PartyPODate != value))
				{
					this.OnPartyPODateChanging(value);
					this.SendPropertyChanging();
					this._PartyPODate = value;
					this.SendPropertyChanged("PartyPODate");
					this.OnPartyPODateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DispatchMaster_DispatchDetail", Storage="_DispatchDetails", ThisKey="DMId", OtherKey="DMId")]
		public EntitySet<DispatchDetail> DispatchDetails
		{
			get
			{
				return this._DispatchDetails;
			}
			set
			{
				this._DispatchDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_DispatchMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.DispatchMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.DispatchMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartyMaster_DispatchMaster", Storage="_PartyMaster", ThisKey="PartyId", OtherKey="PartyId", IsForeignKey=true)]
		public PartyMaster PartyMaster
		{
			get
			{
				return this._PartyMaster.Entity;
			}
			set
			{
				PartyMaster previousValue = this._PartyMaster.Entity;
				if (((previousValue != value) 
							|| (this._PartyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartyMaster.Entity = null;
						previousValue.DispatchMasters.Remove(this);
					}
					this._PartyMaster.Entity = value;
					if ((value != null))
					{
						value.DispatchMasters.Add(this);
						this._PartyId = value.PartyId;
					}
					else
					{
						this._PartyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("PartyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DispatchDetails(DispatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.DispatchMaster = this;
		}
		
		private void detach_DispatchDetails(DispatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.DispatchMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpenseDetail")]
	public partial class ExpenseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EDId;
		
		private System.Nullable<long> _EMId;
		
		private System.Nullable<long> _MachineId;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<ExpenseMaster> _ExpenseMaster;
		
		private EntityRef<MachineMaster> _MachineMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEDIdChanging(long value);
    partial void OnEDIdChanged();
    partial void OnEMIdChanging(System.Nullable<long> value);
    partial void OnEMIdChanged();
    partial void OnMachineIdChanging(System.Nullable<long> value);
    partial void OnMachineIdChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public ExpenseDetail()
		{
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._ExpenseMaster = default(EntityRef<ExpenseMaster>);
			this._MachineMaster = default(EntityRef<MachineMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EDId
		{
			get
			{
				return this._EDId;
			}
			set
			{
				if ((this._EDId != value))
				{
					this.OnEDIdChanging(value);
					this.SendPropertyChanging();
					this._EDId = value;
					this.SendPropertyChanged("EDId");
					this.OnEDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMId", DbType="BigInt")]
		public System.Nullable<long> EMId
		{
			get
			{
				return this._EMId;
			}
			set
			{
				if ((this._EMId != value))
				{
					if (this._ExpenseMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMIdChanging(value);
					this.SendPropertyChanging();
					this._EMId = value;
					this.SendPropertyChanged("EMId");
					this.OnEMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineId", DbType="BigInt")]
		public System.Nullable<long> MachineId
		{
			get
			{
				return this._MachineId;
			}
			set
			{
				if ((this._MachineId != value))
				{
					if (this._MachineMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIdChanging(value);
					this.SendPropertyChanging();
					this._MachineId = value;
					this.SendPropertyChanged("MachineId");
					this.OnMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ExpenseDetail", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ExpenseDetails.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ExpenseDetails.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpenseMaster_ExpenseDetail", Storage="_ExpenseMaster", ThisKey="EMId", OtherKey="EMId", IsForeignKey=true)]
		public ExpenseMaster ExpenseMaster
		{
			get
			{
				return this._ExpenseMaster.Entity;
			}
			set
			{
				ExpenseMaster previousValue = this._ExpenseMaster.Entity;
				if (((previousValue != value) 
							|| (this._ExpenseMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExpenseMaster.Entity = null;
						previousValue.ExpenseDetails.Remove(this);
					}
					this._ExpenseMaster.Entity = value;
					if ((value != null))
					{
						value.ExpenseDetails.Add(this);
						this._EMId = value.EMId;
					}
					else
					{
						this._EMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ExpenseMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ExpenseDetail", Storage="_MachineMaster", ThisKey="MachineId", OtherKey="MachinId", IsForeignKey=true)]
		public MachineMaster MachineMaster
		{
			get
			{
				return this._MachineMaster.Entity;
			}
			set
			{
				MachineMaster previousValue = this._MachineMaster.Entity;
				if (((previousValue != value) 
							|| (this._MachineMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineMaster.Entity = null;
						previousValue.ExpenseDetails.Remove(this);
					}
					this._MachineMaster.Entity = value;
					if ((value != null))
					{
						value.ExpenseDetails.Add(this);
						this._MachineId = value.MachinId;
					}
					else
					{
						this._MachineId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MachineMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpenseMaster")]
	public partial class ExpenseMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EMId;
		
		private string _ExpenseNo;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _Salary;
		
		private System.Nullable<decimal> _Transportation;
		
		private System.Nullable<decimal> _Banking;
		
		private System.Nullable<decimal> _Power;
		
		private System.Nullable<decimal> _Fuel;
		
		private System.Nullable<decimal> _Others;
		
		private System.Nullable<decimal> _Admin;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntitySet<ExpenseDetail> _ExpenseDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMIdChanging(long value);
    partial void OnEMIdChanged();
    partial void OnExpenseNoChanging(string value);
    partial void OnExpenseNoChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnTransportationChanging(System.Nullable<decimal> value);
    partial void OnTransportationChanged();
    partial void OnBankingChanging(System.Nullable<decimal> value);
    partial void OnBankingChanged();
    partial void OnPowerChanging(System.Nullable<decimal> value);
    partial void OnPowerChanged();
    partial void OnFuelChanging(System.Nullable<decimal> value);
    partial void OnFuelChanged();
    partial void OnOthersChanging(System.Nullable<decimal> value);
    partial void OnOthersChanged();
    partial void OnAdminChanging(System.Nullable<decimal> value);
    partial void OnAdminChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public ExpenseMaster()
		{
			this._ExpenseDetails = new EntitySet<ExpenseDetail>(new Action<ExpenseDetail>(this.attach_ExpenseDetails), new Action<ExpenseDetail>(this.detach_ExpenseDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EMId
		{
			get
			{
				return this._EMId;
			}
			set
			{
				if ((this._EMId != value))
				{
					this.OnEMIdChanging(value);
					this.SendPropertyChanging();
					this._EMId = value;
					this.SendPropertyChanged("EMId");
					this.OnEMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenseNo", DbType="NVarChar(50)")]
		public string ExpenseNo
		{
			get
			{
				return this._ExpenseNo;
			}
			set
			{
				if ((this._ExpenseNo != value))
				{
					this.OnExpenseNoChanging(value);
					this.SendPropertyChanging();
					this._ExpenseNo = value;
					this.SendPropertyChanged("ExpenseNo");
					this.OnExpenseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transportation", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Transportation
		{
			get
			{
				return this._Transportation;
			}
			set
			{
				if ((this._Transportation != value))
				{
					this.OnTransportationChanging(value);
					this.SendPropertyChanging();
					this._Transportation = value;
					this.SendPropertyChanged("Transportation");
					this.OnTransportationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banking", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Banking
		{
			get
			{
				return this._Banking;
			}
			set
			{
				if ((this._Banking != value))
				{
					this.OnBankingChanging(value);
					this.SendPropertyChanging();
					this._Banking = value;
					this.SendPropertyChanged("Banking");
					this.OnBankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fuel", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Fuel
		{
			get
			{
				return this._Fuel;
			}
			set
			{
				if ((this._Fuel != value))
				{
					this.OnFuelChanging(value);
					this.SendPropertyChanging();
					this._Fuel = value;
					this.SendPropertyChanged("Fuel");
					this.OnFuelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Others", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Others
		{
			get
			{
				return this._Others;
			}
			set
			{
				if ((this._Others != value))
				{
					this.OnOthersChanging(value);
					this.SendPropertyChanging();
					this._Others = value;
					this.SendPropertyChanged("Others");
					this.OnOthersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpenseMaster_ExpenseDetail", Storage="_ExpenseDetails", ThisKey="EMId", OtherKey="EMId")]
		public EntitySet<ExpenseDetail> ExpenseDetails
		{
			get
			{
				return this._ExpenseDetails;
			}
			set
			{
				this._ExpenseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ExpenseMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ExpenseMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ExpenseMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.ExpenseMaster = this;
		}
		
		private void detach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.ExpenseMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormMaster")]
	public partial class FormMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FormId;
		
		private string _FormName;
		
		private string _MenuName;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormIdChanging(long value);
    partial void OnFormIdChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnMenuNameChanging(string value);
    partial void OnMenuNameChanged();
    #endregion
		
		public FormMaster()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="NVarChar(150)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuName", DbType="NVarChar(50)")]
		public string MenuName
		{
			get
			{
				return this._MenuName;
			}
			set
			{
				if ((this._MenuName != value))
				{
					this.OnMenuNameChanging(value);
					this.SendPropertyChanging();
					this._MenuName = value;
					this.SendPropertyChanged("MenuName");
					this.OnMenuNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormMaster_UserPermission", Storage="_UserPermissions", ThisKey="FormId", OtherKey="FormId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.FormMaster = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.FormMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InwardMaster")]
	public partial class InwardMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InwId;
		
		private System.Nullable<long> _RNMId;
		
		private System.Nullable<long> _IMId;
		
		private string _InwNo;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _Size;
		
		private string _SizeUnit;
		
		private string _GSM;
		
		private string _BF;
		
		private string _Plybond;
		
		private string _Shade;
		
		private System.Nullable<bool> _IsRew;
		
		private System.Nullable<bool> _IsClose;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<MixingMaster> _MixingMasters;
		
		private EntitySet<RewinderMaster> _RewinderMasters;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<ItemMaster> _ItemMaster;
		
		private EntityRef<ReceiveNoteMaster> _ReceiveNoteMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInwIdChanging(long value);
    partial void OnInwIdChanged();
    partial void OnRNMIdChanging(System.Nullable<long> value);
    partial void OnRNMIdChanged();
    partial void OnIMIdChanging(System.Nullable<long> value);
    partial void OnIMIdChanged();
    partial void OnInwNoChanging(string value);
    partial void OnInwNoChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnSizeUnitChanging(string value);
    partial void OnSizeUnitChanged();
    partial void OnGSMChanging(string value);
    partial void OnGSMChanged();
    partial void OnBFChanging(string value);
    partial void OnBFChanged();
    partial void OnPlybondChanging(string value);
    partial void OnPlybondChanged();
    partial void OnShadeChanging(string value);
    partial void OnShadeChanged();
    partial void OnIsRewChanging(System.Nullable<bool> value);
    partial void OnIsRewChanged();
    partial void OnIsCloseChanging(System.Nullable<bool> value);
    partial void OnIsCloseChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public InwardMaster()
		{
			this._MixingMasters = new EntitySet<MixingMaster>(new Action<MixingMaster>(this.attach_MixingMasters), new Action<MixingMaster>(this.detach_MixingMasters));
			this._RewinderMasters = new EntitySet<RewinderMaster>(new Action<RewinderMaster>(this.attach_RewinderMasters), new Action<RewinderMaster>(this.detach_RewinderMasters));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._ItemMaster = default(EntityRef<ItemMaster>);
			this._ReceiveNoteMaster = default(EntityRef<ReceiveNoteMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long InwId
		{
			get
			{
				return this._InwId;
			}
			set
			{
				if ((this._InwId != value))
				{
					this.OnInwIdChanging(value);
					this.SendPropertyChanging();
					this._InwId = value;
					this.SendPropertyChanged("InwId");
					this.OnInwIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNMId", DbType="BigInt")]
		public System.Nullable<long> RNMId
		{
			get
			{
				return this._RNMId;
			}
			set
			{
				if ((this._RNMId != value))
				{
					if (this._ReceiveNoteMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRNMIdChanging(value);
					this.SendPropertyChanging();
					this._RNMId = value;
					this.SendPropertyChanged("RNMId");
					this.OnRNMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMId", DbType="BigInt")]
		public System.Nullable<long> IMId
		{
			get
			{
				return this._IMId;
			}
			set
			{
				if ((this._IMId != value))
				{
					if (this._ItemMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMIdChanging(value);
					this.SendPropertyChanging();
					this._IMId = value;
					this.SendPropertyChanged("IMId");
					this.OnIMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwNo", DbType="NVarChar(50)")]
		public string InwNo
		{
			get
			{
				return this._InwNo;
			}
			set
			{
				if ((this._InwNo != value))
				{
					this.OnInwNoChanging(value);
					this.SendPropertyChanging();
					this._InwNo = value;
					this.SendPropertyChanged("InwNo");
					this.OnInwNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeUnit", DbType="NVarChar(50)")]
		public string SizeUnit
		{
			get
			{
				return this._SizeUnit;
			}
			set
			{
				if ((this._SizeUnit != value))
				{
					this.OnSizeUnitChanging(value);
					this.SendPropertyChanging();
					this._SizeUnit = value;
					this.SendPropertyChanged("SizeUnit");
					this.OnSizeUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GSM", DbType="NVarChar(150)")]
		public string GSM
		{
			get
			{
				return this._GSM;
			}
			set
			{
				if ((this._GSM != value))
				{
					this.OnGSMChanging(value);
					this.SendPropertyChanging();
					this._GSM = value;
					this.SendPropertyChanged("GSM");
					this.OnGSMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BF", DbType="NVarChar(150)")]
		public string BF
		{
			get
			{
				return this._BF;
			}
			set
			{
				if ((this._BF != value))
				{
					this.OnBFChanging(value);
					this.SendPropertyChanging();
					this._BF = value;
					this.SendPropertyChanged("BF");
					this.OnBFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plybond", DbType="NVarChar(150)")]
		public string Plybond
		{
			get
			{
				return this._Plybond;
			}
			set
			{
				if ((this._Plybond != value))
				{
					this.OnPlybondChanging(value);
					this.SendPropertyChanging();
					this._Plybond = value;
					this.SendPropertyChanged("Plybond");
					this.OnPlybondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shade", DbType="NVarChar(150)")]
		public string Shade
		{
			get
			{
				return this._Shade;
			}
			set
			{
				if ((this._Shade != value))
				{
					this.OnShadeChanging(value);
					this.SendPropertyChanging();
					this._Shade = value;
					this.SendPropertyChanged("Shade");
					this.OnShadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRew", DbType="Bit")]
		public System.Nullable<bool> IsRew
		{
			get
			{
				return this._IsRew;
			}
			set
			{
				if ((this._IsRew != value))
				{
					this.OnIsRewChanging(value);
					this.SendPropertyChanging();
					this._IsRew = value;
					this.SendPropertyChanged("IsRew");
					this.OnIsRewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClose", DbType="Bit")]
		public System.Nullable<bool> IsClose
		{
			get
			{
				return this._IsClose;
			}
			set
			{
				if ((this._IsClose != value))
				{
					this.OnIsCloseChanging(value);
					this.SendPropertyChanging();
					this._IsClose = value;
					this.SendPropertyChanged("IsClose");
					this.OnIsCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InwardMaster_MixingMaster", Storage="_MixingMasters", ThisKey="InwId", OtherKey="InwId")]
		public EntitySet<MixingMaster> MixingMasters
		{
			get
			{
				return this._MixingMasters;
			}
			set
			{
				this._MixingMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InwardMaster_RewinderMaster", Storage="_RewinderMasters", ThisKey="InwId", OtherKey="InwId")]
		public EntitySet<RewinderMaster> RewinderMasters
		{
			get
			{
				return this._RewinderMasters;
			}
			set
			{
				this._RewinderMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_InwardMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.InwardMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.InwardMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_InwardMaster", Storage="_ItemMaster", ThisKey="IMId", OtherKey="IMId", IsForeignKey=true)]
		public ItemMaster ItemMaster
		{
			get
			{
				return this._ItemMaster.Entity;
			}
			set
			{
				ItemMaster previousValue = this._ItemMaster.Entity;
				if (((previousValue != value) 
							|| (this._ItemMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemMaster.Entity = null;
						previousValue.InwardMasters.Remove(this);
					}
					this._ItemMaster.Entity = value;
					if ((value != null))
					{
						value.InwardMasters.Add(this);
						this._IMId = value.IMId;
					}
					else
					{
						this._IMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ItemMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiveNoteMaster_InwardMaster", Storage="_ReceiveNoteMaster", ThisKey="RNMId", OtherKey="RNMId", IsForeignKey=true)]
		public ReceiveNoteMaster ReceiveNoteMaster
		{
			get
			{
				return this._ReceiveNoteMaster.Entity;
			}
			set
			{
				ReceiveNoteMaster previousValue = this._ReceiveNoteMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReceiveNoteMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReceiveNoteMaster.Entity = null;
						previousValue.InwardMasters.Remove(this);
					}
					this._ReceiveNoteMaster.Entity = value;
					if ((value != null))
					{
						value.InwardMasters.Add(this);
						this._RNMId = value.RNMId;
					}
					else
					{
						this._RNMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ReceiveNoteMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.InwardMaster = this;
		}
		
		private void detach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.InwardMaster = null;
		}
		
		private void attach_RewinderMasters(RewinderMaster entity)
		{
			this.SendPropertyChanging();
			entity.InwardMaster = this;
		}
		
		private void detach_RewinderMasters(RewinderMaster entity)
		{
			this.SendPropertyChanging();
			entity.InwardMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemMaster")]
	public partial class ItemMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IMId;
		
		private string _Name;
		
		private string _Type;
		
		private string _ProcessType;
		
		private string _InwardType;
		
		private System.Nullable<decimal> _Qty;
		
		private string _UOM;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<ConsumptionDetail> _ConsumptionDetails;
		
		private EntitySet<InwardMaster> _InwardMasters;
		
		private EntitySet<MixingMaster> _MixingMasters;
		
		private EntitySet<ReceiveNoteDetail> _ReceiveNoteDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIMIdChanging(long value);
    partial void OnIMIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnProcessTypeChanging(string value);
    partial void OnProcessTypeChanged();
    partial void OnInwardTypeChanging(string value);
    partial void OnInwardTypeChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUOMChanging(string value);
    partial void OnUOMChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ItemMaster()
		{
			this._ConsumptionDetails = new EntitySet<ConsumptionDetail>(new Action<ConsumptionDetail>(this.attach_ConsumptionDetails), new Action<ConsumptionDetail>(this.detach_ConsumptionDetails));
			this._InwardMasters = new EntitySet<InwardMaster>(new Action<InwardMaster>(this.attach_InwardMasters), new Action<InwardMaster>(this.detach_InwardMasters));
			this._MixingMasters = new EntitySet<MixingMaster>(new Action<MixingMaster>(this.attach_MixingMasters), new Action<MixingMaster>(this.detach_MixingMasters));
			this._ReceiveNoteDetails = new EntitySet<ReceiveNoteDetail>(new Action<ReceiveNoteDetail>(this.attach_ReceiveNoteDetails), new Action<ReceiveNoteDetail>(this.detach_ReceiveNoteDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IMId
		{
			get
			{
				return this._IMId;
			}
			set
			{
				if ((this._IMId != value))
				{
					this.OnIMIdChanging(value);
					this.SendPropertyChanging();
					this._IMId = value;
					this.SendPropertyChanged("IMId");
					this.OnIMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessType", DbType="NVarChar(50)")]
		public string ProcessType
		{
			get
			{
				return this._ProcessType;
			}
			set
			{
				if ((this._ProcessType != value))
				{
					this.OnProcessTypeChanging(value);
					this.SendPropertyChanging();
					this._ProcessType = value;
					this.SendPropertyChanged("ProcessType");
					this.OnProcessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwardType", DbType="NVarChar(50)")]
		public string InwardType
		{
			get
			{
				return this._InwardType;
			}
			set
			{
				if ((this._InwardType != value))
				{
					this.OnInwardTypeChanging(value);
					this.SendPropertyChanging();
					this._InwardType = value;
					this.SendPropertyChanged("InwardType");
					this.OnInwardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UOM", DbType="NVarChar(50)")]
		public string UOM
		{
			get
			{
				return this._UOM;
			}
			set
			{
				if ((this._UOM != value))
				{
					this.OnUOMChanging(value);
					this.SendPropertyChanging();
					this._UOM = value;
					this.SendPropertyChanged("UOM");
					this.OnUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_ConsumptionDetail", Storage="_ConsumptionDetails", ThisKey="IMId", OtherKey="IMId")]
		public EntitySet<ConsumptionDetail> ConsumptionDetails
		{
			get
			{
				return this._ConsumptionDetails;
			}
			set
			{
				this._ConsumptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_InwardMaster", Storage="_InwardMasters", ThisKey="IMId", OtherKey="IMId")]
		public EntitySet<InwardMaster> InwardMasters
		{
			get
			{
				return this._InwardMasters;
			}
			set
			{
				this._InwardMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_MixingMaster", Storage="_MixingMasters", ThisKey="IMId", OtherKey="IMId")]
		public EntitySet<MixingMaster> MixingMasters
		{
			get
			{
				return this._MixingMasters;
			}
			set
			{
				this._MixingMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_ReceiveNoteDetail", Storage="_ReceiveNoteDetails", ThisKey="IMId", OtherKey="IMId")]
		public EntitySet<ReceiveNoteDetail> ReceiveNoteDetails
		{
			get
			{
				return this._ReceiveNoteDetails;
			}
			set
			{
				this._ReceiveNoteDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ItemMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ItemMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ItemMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = this;
		}
		
		private void detach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = null;
		}
		
		private void attach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = this;
		}
		
		private void detach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = null;
		}
		
		private void attach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = this;
		}
		
		private void detach_MixingMasters(MixingMaster entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = null;
		}
		
		private void attach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = this;
		}
		
		private void detach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MachineMaster")]
	public partial class MachineMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MachinId;
		
		private string _Machine;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _LotNo;
		
		private string _DegreeInnerDiameter;
		
		private string _Size;
		
		private string _HeightLength;
		
		private string _CSType;
		
		private string _DesignThickness;
		
		private string _Weight;
		
		private System.Nullable<bool> _IsClose;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<WasteMaster> _WasteMasters;
		
		private EntitySet<ConsumptionMaster> _ConsumptionMasters;
		
		private EntitySet<DispatchDetail> _DispatchDetails;
		
		private EntitySet<ExpenseDetail> _ExpenseDetails;
		
		private EntitySet<ProductionDetail> _ProductionDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachinIdChanging(long value);
    partial void OnMachinIdChanged();
    partial void OnMachineChanging(string value);
    partial void OnMachineChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnLotNoChanging(string value);
    partial void OnLotNoChanged();
    partial void OnDegreeInnerDiameterChanging(string value);
    partial void OnDegreeInnerDiameterChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnHeightLengthChanging(string value);
    partial void OnHeightLengthChanged();
    partial void OnCSTypeChanging(string value);
    partial void OnCSTypeChanged();
    partial void OnDesignThicknessChanging(string value);
    partial void OnDesignThicknessChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnIsCloseChanging(System.Nullable<bool> value);
    partial void OnIsCloseChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public MachineMaster()
		{
			this._WasteMasters = new EntitySet<WasteMaster>(new Action<WasteMaster>(this.attach_WasteMasters), new Action<WasteMaster>(this.detach_WasteMasters));
			this._ConsumptionMasters = new EntitySet<ConsumptionMaster>(new Action<ConsumptionMaster>(this.attach_ConsumptionMasters), new Action<ConsumptionMaster>(this.detach_ConsumptionMasters));
			this._DispatchDetails = new EntitySet<DispatchDetail>(new Action<DispatchDetail>(this.attach_DispatchDetails), new Action<DispatchDetail>(this.detach_DispatchDetails));
			this._ExpenseDetails = new EntitySet<ExpenseDetail>(new Action<ExpenseDetail>(this.attach_ExpenseDetails), new Action<ExpenseDetail>(this.detach_ExpenseDetails));
			this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachinId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MachinId
		{
			get
			{
				return this._MachinId;
			}
			set
			{
				if ((this._MachinId != value))
				{
					this.OnMachinIdChanging(value);
					this.SendPropertyChanging();
					this._MachinId = value;
					this.SendPropertyChanged("MachinId");
					this.OnMachinIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine", DbType="NVarChar(150)")]
		public string Machine
		{
			get
			{
				return this._Machine;
			}
			set
			{
				if ((this._Machine != value))
				{
					this.OnMachineChanging(value);
					this.SendPropertyChanging();
					this._Machine = value;
					this.SendPropertyChanged("Machine");
					this.OnMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNo", DbType="NVarChar(50)")]
		public string LotNo
		{
			get
			{
				return this._LotNo;
			}
			set
			{
				if ((this._LotNo != value))
				{
					this.OnLotNoChanging(value);
					this.SendPropertyChanging();
					this._LotNo = value;
					this.SendPropertyChanged("LotNo");
					this.OnLotNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeInnerDiameter", DbType="NVarChar(50)")]
		public string DegreeInnerDiameter
		{
			get
			{
				return this._DegreeInnerDiameter;
			}
			set
			{
				if ((this._DegreeInnerDiameter != value))
				{
					this.OnDegreeInnerDiameterChanging(value);
					this.SendPropertyChanging();
					this._DegreeInnerDiameter = value;
					this.SendPropertyChanged("DegreeInnerDiameter");
					this.OnDegreeInnerDiameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightLength", DbType="NVarChar(50)")]
		public string HeightLength
		{
			get
			{
				return this._HeightLength;
			}
			set
			{
				if ((this._HeightLength != value))
				{
					this.OnHeightLengthChanging(value);
					this.SendPropertyChanging();
					this._HeightLength = value;
					this.SendPropertyChanged("HeightLength");
					this.OnHeightLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSType", DbType="NVarChar(50)")]
		public string CSType
		{
			get
			{
				return this._CSType;
			}
			set
			{
				if ((this._CSType != value))
				{
					this.OnCSTypeChanging(value);
					this.SendPropertyChanging();
					this._CSType = value;
					this.SendPropertyChanged("CSType");
					this.OnCSTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignThickness", DbType="NVarChar(50)")]
		public string DesignThickness
		{
			get
			{
				return this._DesignThickness;
			}
			set
			{
				if ((this._DesignThickness != value))
				{
					this.OnDesignThicknessChanging(value);
					this.SendPropertyChanging();
					this._DesignThickness = value;
					this.SendPropertyChanged("DesignThickness");
					this.OnDesignThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="NVarChar(50)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClose", DbType="Bit")]
		public System.Nullable<bool> IsClose
		{
			get
			{
				return this._IsClose;
			}
			set
			{
				if ((this._IsClose != value))
				{
					this.OnIsCloseChanging(value);
					this.SendPropertyChanging();
					this._IsClose = value;
					this.SendPropertyChanged("IsClose");
					this.OnIsCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_WasteMaster", Storage="_WasteMasters", ThisKey="MachinId", OtherKey="MachineId")]
		public EntitySet<WasteMaster> WasteMasters
		{
			get
			{
				return this._WasteMasters;
			}
			set
			{
				this._WasteMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ConsumptionMaster", Storage="_ConsumptionMasters", ThisKey="MachinId", OtherKey="MachinId")]
		public EntitySet<ConsumptionMaster> ConsumptionMasters
		{
			get
			{
				return this._ConsumptionMasters;
			}
			set
			{
				this._ConsumptionMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_DispatchDetail", Storage="_DispatchDetails", ThisKey="MachinId", OtherKey="MachineId")]
		public EntitySet<DispatchDetail> DispatchDetails
		{
			get
			{
				return this._DispatchDetails;
			}
			set
			{
				this._DispatchDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ExpenseDetail", Storage="_ExpenseDetails", ThisKey="MachinId", OtherKey="MachineId")]
		public EntitySet<ExpenseDetail> ExpenseDetails
		{
			get
			{
				return this._ExpenseDetails;
			}
			set
			{
				this._ExpenseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ProductionDetail", Storage="_ProductionDetails", ThisKey="MachinId", OtherKey="MachineId")]
		public EntitySet<ProductionDetail> ProductionDetails
		{
			get
			{
				return this._ProductionDetails;
			}
			set
			{
				this._ProductionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_MachineMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.MachineMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.MachineMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WasteMasters(WasteMaster entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = this;
		}
		
		private void detach_WasteMasters(WasteMaster entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = null;
		}
		
		private void attach_ConsumptionMasters(ConsumptionMaster entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = this;
		}
		
		private void detach_ConsumptionMasters(ConsumptionMaster entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = null;
		}
		
		private void attach_DispatchDetails(DispatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = this;
		}
		
		private void detach_DispatchDetails(DispatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = null;
		}
		
		private void attach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = this;
		}
		
		private void detach_ExpenseDetails(ExpenseDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = null;
		}
		
		private void attach_ProductionDetails(ProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = this;
		}
		
		private void detach_ProductionDetails(ProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MachineMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MixingMaster")]
	public partial class MixingMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MMId;
		
		private System.Nullable<long> _InwId;
		
		private System.Nullable<long> _IMId;
		
		private string _MixingNo;
		
		private System.Nullable<decimal> _IssueQty;
		
		private System.Nullable<decimal> _MixingWater;
		
		private System.Nullable<decimal> _FinisheQty;
		
		private System.Nullable<decimal> _IssueWeight;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<ConsumptionDetail> _ConsumptionDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<InwardMaster> _InwardMaster;
		
		private EntityRef<ItemMaster> _ItemMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMMIdChanging(long value);
    partial void OnMMIdChanged();
    partial void OnInwIdChanging(System.Nullable<long> value);
    partial void OnInwIdChanged();
    partial void OnIMIdChanging(System.Nullable<long> value);
    partial void OnIMIdChanged();
    partial void OnMixingNoChanging(string value);
    partial void OnMixingNoChanged();
    partial void OnIssueQtyChanging(System.Nullable<decimal> value);
    partial void OnIssueQtyChanged();
    partial void OnMixingWaterChanging(System.Nullable<decimal> value);
    partial void OnMixingWaterChanged();
    partial void OnFinisheQtyChanging(System.Nullable<decimal> value);
    partial void OnFinisheQtyChanged();
    partial void OnIssueWeightChanging(System.Nullable<decimal> value);
    partial void OnIssueWeightChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public MixingMaster()
		{
			this._ConsumptionDetails = new EntitySet<ConsumptionDetail>(new Action<ConsumptionDetail>(this.attach_ConsumptionDetails), new Action<ConsumptionDetail>(this.detach_ConsumptionDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._InwardMaster = default(EntityRef<InwardMaster>);
			this._ItemMaster = default(EntityRef<ItemMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MMId
		{
			get
			{
				return this._MMId;
			}
			set
			{
				if ((this._MMId != value))
				{
					this.OnMMIdChanging(value);
					this.SendPropertyChanging();
					this._MMId = value;
					this.SendPropertyChanged("MMId");
					this.OnMMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwId", DbType="BigInt")]
		public System.Nullable<long> InwId
		{
			get
			{
				return this._InwId;
			}
			set
			{
				if ((this._InwId != value))
				{
					if (this._InwardMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInwIdChanging(value);
					this.SendPropertyChanging();
					this._InwId = value;
					this.SendPropertyChanged("InwId");
					this.OnInwIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMId", DbType="BigInt")]
		public System.Nullable<long> IMId
		{
			get
			{
				return this._IMId;
			}
			set
			{
				if ((this._IMId != value))
				{
					if (this._ItemMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMIdChanging(value);
					this.SendPropertyChanging();
					this._IMId = value;
					this.SendPropertyChanged("IMId");
					this.OnIMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MixingNo", DbType="NVarChar(50)")]
		public string MixingNo
		{
			get
			{
				return this._MixingNo;
			}
			set
			{
				if ((this._MixingNo != value))
				{
					this.OnMixingNoChanging(value);
					this.SendPropertyChanging();
					this._MixingNo = value;
					this.SendPropertyChanged("MixingNo");
					this.OnMixingNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueQty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> IssueQty
		{
			get
			{
				return this._IssueQty;
			}
			set
			{
				if ((this._IssueQty != value))
				{
					this.OnIssueQtyChanging(value);
					this.SendPropertyChanging();
					this._IssueQty = value;
					this.SendPropertyChanged("IssueQty");
					this.OnIssueQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MixingWater", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> MixingWater
		{
			get
			{
				return this._MixingWater;
			}
			set
			{
				if ((this._MixingWater != value))
				{
					this.OnMixingWaterChanging(value);
					this.SendPropertyChanging();
					this._MixingWater = value;
					this.SendPropertyChanged("MixingWater");
					this.OnMixingWaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinisheQty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> FinisheQty
		{
			get
			{
				return this._FinisheQty;
			}
			set
			{
				if ((this._FinisheQty != value))
				{
					this.OnFinisheQtyChanging(value);
					this.SendPropertyChanging();
					this._FinisheQty = value;
					this.SendPropertyChanged("FinisheQty");
					this.OnFinisheQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueWeight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> IssueWeight
		{
			get
			{
				return this._IssueWeight;
			}
			set
			{
				if ((this._IssueWeight != value))
				{
					this.OnIssueWeightChanging(value);
					this.SendPropertyChanging();
					this._IssueWeight = value;
					this.SendPropertyChanged("IssueWeight");
					this.OnIssueWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MixingMaster_ConsumptionDetail", Storage="_ConsumptionDetails", ThisKey="MMId", OtherKey="MMId")]
		public EntitySet<ConsumptionDetail> ConsumptionDetails
		{
			get
			{
				return this._ConsumptionDetails;
			}
			set
			{
				this._ConsumptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_MixingMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.MixingMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.MixingMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InwardMaster_MixingMaster", Storage="_InwardMaster", ThisKey="InwId", OtherKey="InwId", IsForeignKey=true)]
		public InwardMaster InwardMaster
		{
			get
			{
				return this._InwardMaster.Entity;
			}
			set
			{
				InwardMaster previousValue = this._InwardMaster.Entity;
				if (((previousValue != value) 
							|| (this._InwardMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InwardMaster.Entity = null;
						previousValue.MixingMasters.Remove(this);
					}
					this._InwardMaster.Entity = value;
					if ((value != null))
					{
						value.MixingMasters.Add(this);
						this._InwId = value.InwId;
					}
					else
					{
						this._InwId = default(Nullable<long>);
					}
					this.SendPropertyChanged("InwardMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_MixingMaster", Storage="_ItemMaster", ThisKey="IMId", OtherKey="IMId", IsForeignKey=true)]
		public ItemMaster ItemMaster
		{
			get
			{
				return this._ItemMaster.Entity;
			}
			set
			{
				ItemMaster previousValue = this._ItemMaster.Entity;
				if (((previousValue != value) 
							|| (this._ItemMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemMaster.Entity = null;
						previousValue.MixingMasters.Remove(this);
					}
					this._ItemMaster.Entity = value;
					if ((value != null))
					{
						value.MixingMasters.Add(this);
						this._IMId = value.IMId;
					}
					else
					{
						this._IMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ItemMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MixingMaster = this;
		}
		
		private void detach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MixingMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartyMaster")]
	public partial class PartyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PartyId;
		
		private string _PartyName;
		
		private string _BillingName;
		
		private string _BillingAddress;
		
		private string _DeliveryAddress;
		
		private string _ContactNo;
		
		private string _Email;
		
		private string _Website;
		
		private string _PinCode;
		
		private string _City;
		
		private string _State;
		
		private string _StateCode;
		
		private string _Country;
		
		private string _GSTIN;
		
		private string _PANNo;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<DispatchMaster> _DispatchMasters;
		
		private EntitySet<ReceiveNoteMaster> _ReceiveNoteMasters;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartyIdChanging(long value);
    partial void OnPartyIdChanged();
    partial void OnPartyNameChanging(string value);
    partial void OnPartyNameChanged();
    partial void OnBillingNameChanging(string value);
    partial void OnBillingNameChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnPinCodeChanging(string value);
    partial void OnPinCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnGSTINChanging(string value);
    partial void OnGSTINChanged();
    partial void OnPANNoChanging(string value);
    partial void OnPANNoChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public PartyMaster()
		{
			this._DispatchMasters = new EntitySet<DispatchMaster>(new Action<DispatchMaster>(this.attach_DispatchMasters), new Action<DispatchMaster>(this.detach_DispatchMasters));
			this._ReceiveNoteMasters = new EntitySet<ReceiveNoteMaster>(new Action<ReceiveNoteMaster>(this.attach_ReceiveNoteMasters), new Action<ReceiveNoteMaster>(this.detach_ReceiveNoteMasters));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PartyId
		{
			get
			{
				return this._PartyId;
			}
			set
			{
				if ((this._PartyId != value))
				{
					this.OnPartyIdChanging(value);
					this.SendPropertyChanging();
					this._PartyId = value;
					this.SendPropertyChanged("PartyId");
					this.OnPartyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyName", DbType="NVarChar(150)")]
		public string PartyName
		{
			get
			{
				return this._PartyName;
			}
			set
			{
				if ((this._PartyName != value))
				{
					this.OnPartyNameChanging(value);
					this.SendPropertyChanging();
					this._PartyName = value;
					this.SendPropertyChanged("PartyName");
					this.OnPartyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingName", DbType="NVarChar(150)")]
		public string BillingName
		{
			get
			{
				return this._BillingName;
			}
			set
			{
				if ((this._BillingName != value))
				{
					this.OnBillingNameChanging(value);
					this.SendPropertyChanging();
					this._BillingName = value;
					this.SendPropertyChanged("BillingName");
					this.OnBillingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NVarChar(1000)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(1000)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(150)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinCode", DbType="NVarChar(50)")]
		public string PinCode
		{
			get
			{
				return this._PinCode;
			}
			set
			{
				if ((this._PinCode != value))
				{
					this.OnPinCodeChanging(value);
					this.SendPropertyChanging();
					this._PinCode = value;
					this.SendPropertyChanged("PinCode");
					this.OnPinCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="NVarChar(50)")]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GSTIN", DbType="NVarChar(100)")]
		public string GSTIN
		{
			get
			{
				return this._GSTIN;
			}
			set
			{
				if ((this._GSTIN != value))
				{
					this.OnGSTINChanging(value);
					this.SendPropertyChanging();
					this._GSTIN = value;
					this.SendPropertyChanged("GSTIN");
					this.OnGSTINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PANNo", DbType="NVarChar(50)")]
		public string PANNo
		{
			get
			{
				return this._PANNo;
			}
			set
			{
				if ((this._PANNo != value))
				{
					this.OnPANNoChanging(value);
					this.SendPropertyChanging();
					this._PANNo = value;
					this.SendPropertyChanged("PANNo");
					this.OnPANNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartyMaster_DispatchMaster", Storage="_DispatchMasters", ThisKey="PartyId", OtherKey="PartyId")]
		public EntitySet<DispatchMaster> DispatchMasters
		{
			get
			{
				return this._DispatchMasters;
			}
			set
			{
				this._DispatchMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartyMaster_ReceiveNoteMaster", Storage="_ReceiveNoteMasters", ThisKey="PartyId", OtherKey="PartyId")]
		public EntitySet<ReceiveNoteMaster> ReceiveNoteMasters
		{
			get
			{
				return this._ReceiveNoteMasters;
			}
			set
			{
				this._ReceiveNoteMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_PartyMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.PartyMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.PartyMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DispatchMasters(DispatchMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartyMaster = this;
		}
		
		private void detach_DispatchMasters(DispatchMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartyMaster = null;
		}
		
		private void attach_ReceiveNoteMasters(ReceiveNoteMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartyMaster = this;
		}
		
		private void detach_ReceiveNoteMasters(ReceiveNoteMaster entity)
		{
			this.SendPropertyChanging();
			entity.PartyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionDetail")]
	public partial class ProductionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProDId;
		
		private System.Nullable<long> _ProId;
		
		private System.Nullable<long> _MachineId;
		
		private System.Nullable<decimal> _Production;
		
		private string _Unit;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<MachineMaster> _MachineMaster;
		
		private EntityRef<ProductionMaster> _ProductionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProDIdChanging(long value);
    partial void OnProDIdChanged();
    partial void OnProIdChanging(System.Nullable<long> value);
    partial void OnProIdChanged();
    partial void OnMachineIdChanging(System.Nullable<long> value);
    partial void OnMachineIdChanged();
    partial void OnProductionChanging(System.Nullable<decimal> value);
    partial void OnProductionChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public ProductionDetail()
		{
			this._MachineMaster = default(EntityRef<MachineMaster>);
			this._ProductionMaster = default(EntityRef<ProductionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ProDId
		{
			get
			{
				return this._ProDId;
			}
			set
			{
				if ((this._ProDId != value))
				{
					this.OnProDIdChanging(value);
					this.SendPropertyChanging();
					this._ProDId = value;
					this.SendPropertyChanged("ProDId");
					this.OnProDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProId", DbType="BigInt")]
		public System.Nullable<long> ProId
		{
			get
			{
				return this._ProId;
			}
			set
			{
				if ((this._ProId != value))
				{
					if (this._ProductionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProIdChanging(value);
					this.SendPropertyChanging();
					this._ProId = value;
					this.SendPropertyChanged("ProId");
					this.OnProIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineId", DbType="BigInt")]
		public System.Nullable<long> MachineId
		{
			get
			{
				return this._MachineId;
			}
			set
			{
				if ((this._MachineId != value))
				{
					if (this._MachineMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIdChanging(value);
					this.SendPropertyChanging();
					this._MachineId = value;
					this.SendPropertyChanged("MachineId");
					this.OnMachineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Production", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Production
		{
			get
			{
				return this._Production;
			}
			set
			{
				if ((this._Production != value))
				{
					this.OnProductionChanging(value);
					this.SendPropertyChanging();
					this._Production = value;
					this.SendPropertyChanged("Production");
					this.OnProductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MachineMaster_ProductionDetail", Storage="_MachineMaster", ThisKey="MachineId", OtherKey="MachinId", IsForeignKey=true)]
		public MachineMaster MachineMaster
		{
			get
			{
				return this._MachineMaster.Entity;
			}
			set
			{
				MachineMaster previousValue = this._MachineMaster.Entity;
				if (((previousValue != value) 
							|| (this._MachineMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MachineMaster.Entity = null;
						previousValue.ProductionDetails.Remove(this);
					}
					this._MachineMaster.Entity = value;
					if ((value != null))
					{
						value.ProductionDetails.Add(this);
						this._MachineId = value.MachinId;
					}
					else
					{
						this._MachineId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MachineMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionMaster_ProductionDetail", Storage="_ProductionMaster", ThisKey="ProId", OtherKey="ProId", IsForeignKey=true)]
		public ProductionMaster ProductionMaster
		{
			get
			{
				return this._ProductionMaster.Entity;
			}
			set
			{
				ProductionMaster previousValue = this._ProductionMaster.Entity;
				if (((previousValue != value) 
							|| (this._ProductionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionMaster.Entity = null;
						previousValue.ProductionDetails.Remove(this);
					}
					this._ProductionMaster.Entity = value;
					if ((value != null))
					{
						value.ProductionDetails.Add(this);
						this._ProId = value.ProId;
					}
					else
					{
						this._ProId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ProductionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionMaster")]
	public partial class ProductionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProId;
		
		private string _Machine;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Remarks;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<ProductionDetail> _ProductionDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProIdChanging(long value);
    partial void OnProIdChanged();
    partial void OnMachineChanging(string value);
    partial void OnMachineChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ProductionMaster()
		{
			this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ProId
		{
			get
			{
				return this._ProId;
			}
			set
			{
				if ((this._ProId != value))
				{
					this.OnProIdChanging(value);
					this.SendPropertyChanging();
					this._ProId = value;
					this.SendPropertyChanged("ProId");
					this.OnProIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine", DbType="NVarChar(50)")]
		public string Machine
		{
			get
			{
				return this._Machine;
			}
			set
			{
				if ((this._Machine != value))
				{
					this.OnMachineChanging(value);
					this.SendPropertyChanging();
					this._Machine = value;
					this.SendPropertyChanged("Machine");
					this.OnMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(1000)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionMaster_ProductionDetail", Storage="_ProductionDetails", ThisKey="ProId", OtherKey="ProId")]
		public EntitySet<ProductionDetail> ProductionDetails
		{
			get
			{
				return this._ProductionDetails;
			}
			set
			{
				this._ProductionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ProductionMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ProductionMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ProductionMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductionDetails(ProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductionMaster = this;
		}
		
		private void detach_ProductionDetails(ProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveNoteDetail")]
	public partial class ReceiveNoteDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RNDId;
		
		private System.Nullable<long> _RNMId;
		
		private System.Nullable<long> _IMId;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<decimal> _InwardQty;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<decimal> _Discount;
		
		private System.Nullable<decimal> _NetRate;
		
		private System.Nullable<decimal> _CGST;
		
		private System.Nullable<decimal> _SGST;
		
		private System.Nullable<decimal> _IGST;
		
		private System.Nullable<decimal> _OtherCharges;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<bool> _IsInward;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntityRef<ItemMaster> _ItemMaster;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<ReceiveNoteMaster> _ReceiveNoteMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRNDIdChanging(long value);
    partial void OnRNDIdChanged();
    partial void OnRNMIdChanging(System.Nullable<long> value);
    partial void OnRNMIdChanged();
    partial void OnIMIdChanging(System.Nullable<long> value);
    partial void OnIMIdChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnInwardQtyChanging(System.Nullable<decimal> value);
    partial void OnInwardQtyChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnNetRateChanging(System.Nullable<decimal> value);
    partial void OnNetRateChanged();
    partial void OnCGSTChanging(System.Nullable<decimal> value);
    partial void OnCGSTChanged();
    partial void OnSGSTChanging(System.Nullable<decimal> value);
    partial void OnSGSTChanged();
    partial void OnIGSTChanging(System.Nullable<decimal> value);
    partial void OnIGSTChanged();
    partial void OnOtherChargesChanging(System.Nullable<decimal> value);
    partial void OnOtherChargesChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnIsInwardChanging(System.Nullable<bool> value);
    partial void OnIsInwardChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ReceiveNoteDetail()
		{
			this._ItemMaster = default(EntityRef<ItemMaster>);
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._ReceiveNoteMaster = default(EntityRef<ReceiveNoteMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RNDId
		{
			get
			{
				return this._RNDId;
			}
			set
			{
				if ((this._RNDId != value))
				{
					this.OnRNDIdChanging(value);
					this.SendPropertyChanging();
					this._RNDId = value;
					this.SendPropertyChanged("RNDId");
					this.OnRNDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNMId", DbType="BigInt")]
		public System.Nullable<long> RNMId
		{
			get
			{
				return this._RNMId;
			}
			set
			{
				if ((this._RNMId != value))
				{
					if (this._ReceiveNoteMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRNMIdChanging(value);
					this.SendPropertyChanging();
					this._RNMId = value;
					this.SendPropertyChanged("RNMId");
					this.OnRNMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMId", DbType="BigInt")]
		public System.Nullable<long> IMId
		{
			get
			{
				return this._IMId;
			}
			set
			{
				if ((this._IMId != value))
				{
					if (this._ItemMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIMIdChanging(value);
					this.SendPropertyChanging();
					this._IMId = value;
					this.SendPropertyChanged("IMId");
					this.OnIMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwardQty", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> InwardQty
		{
			get
			{
				return this._InwardQty;
			}
			set
			{
				if ((this._InwardQty != value))
				{
					this.OnInwardQtyChanging(value);
					this.SendPropertyChanging();
					this._InwardQty = value;
					this.SendPropertyChanged("InwardQty");
					this.OnInwardQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetRate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> NetRate
		{
			get
			{
				return this._NetRate;
			}
			set
			{
				if ((this._NetRate != value))
				{
					this.OnNetRateChanging(value);
					this.SendPropertyChanging();
					this._NetRate = value;
					this.SendPropertyChanged("NetRate");
					this.OnNetRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CGST", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CGST
		{
			get
			{
				return this._CGST;
			}
			set
			{
				if ((this._CGST != value))
				{
					this.OnCGSTChanging(value);
					this.SendPropertyChanging();
					this._CGST = value;
					this.SendPropertyChanged("CGST");
					this.OnCGSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SGST", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SGST
		{
			get
			{
				return this._SGST;
			}
			set
			{
				if ((this._SGST != value))
				{
					this.OnSGSTChanging(value);
					this.SendPropertyChanging();
					this._SGST = value;
					this.SendPropertyChanged("SGST");
					this.OnSGSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IGST", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> IGST
		{
			get
			{
				return this._IGST;
			}
			set
			{
				if ((this._IGST != value))
				{
					this.OnIGSTChanging(value);
					this.SendPropertyChanging();
					this._IGST = value;
					this.SendPropertyChanged("IGST");
					this.OnIGSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCharges", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OtherCharges
		{
			get
			{
				return this._OtherCharges;
			}
			set
			{
				if ((this._OtherCharges != value))
				{
					this.OnOtherChargesChanging(value);
					this.SendPropertyChanging();
					this._OtherCharges = value;
					this.SendPropertyChanged("OtherCharges");
					this.OnOtherChargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInward", DbType="Bit")]
		public System.Nullable<bool> IsInward
		{
			get
			{
				return this._IsInward;
			}
			set
			{
				if ((this._IsInward != value))
				{
					this.OnIsInwardChanging(value);
					this.SendPropertyChanging();
					this._IsInward = value;
					this.SendPropertyChanged("IsInward");
					this.OnIsInwardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemMaster_ReceiveNoteDetail", Storage="_ItemMaster", ThisKey="IMId", OtherKey="IMId", IsForeignKey=true)]
		public ItemMaster ItemMaster
		{
			get
			{
				return this._ItemMaster.Entity;
			}
			set
			{
				ItemMaster previousValue = this._ItemMaster.Entity;
				if (((previousValue != value) 
							|| (this._ItemMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemMaster.Entity = null;
						previousValue.ReceiveNoteDetails.Remove(this);
					}
					this._ItemMaster.Entity = value;
					if ((value != null))
					{
						value.ReceiveNoteDetails.Add(this);
						this._IMId = value.IMId;
					}
					else
					{
						this._IMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ItemMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ReceiveNoteDetail", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ReceiveNoteDetails.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ReceiveNoteDetails.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiveNoteMaster_ReceiveNoteDetail", Storage="_ReceiveNoteMaster", ThisKey="RNMId", OtherKey="RNMId", IsForeignKey=true)]
		public ReceiveNoteMaster ReceiveNoteMaster
		{
			get
			{
				return this._ReceiveNoteMaster.Entity;
			}
			set
			{
				ReceiveNoteMaster previousValue = this._ReceiveNoteMaster.Entity;
				if (((previousValue != value) 
							|| (this._ReceiveNoteMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReceiveNoteMaster.Entity = null;
						previousValue.ReceiveNoteDetails.Remove(this);
					}
					this._ReceiveNoteMaster.Entity = value;
					if ((value != null))
					{
						value.ReceiveNoteDetails.Add(this);
						this._RNMId = value.RNMId;
					}
					else
					{
						this._RNMId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ReceiveNoteMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveNoteMaster")]
	public partial class ReceiveNoteMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RNMId;
		
		private System.Nullable<long> _PartyId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _RNNo;
		
		private System.Nullable<decimal> _Amount;
		
		private string _Remarks;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<InwardMaster> _InwardMasters;
		
		private EntitySet<ReceiveNoteDetail> _ReceiveNoteDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<PartyMaster> _PartyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRNMIdChanging(long value);
    partial void OnRNMIdChanged();
    partial void OnPartyIdChanging(System.Nullable<long> value);
    partial void OnPartyIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnRNNoChanging(string value);
    partial void OnRNNoChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ReceiveNoteMaster()
		{
			this._InwardMasters = new EntitySet<InwardMaster>(new Action<InwardMaster>(this.attach_InwardMasters), new Action<InwardMaster>(this.detach_InwardMasters));
			this._ReceiveNoteDetails = new EntitySet<ReceiveNoteDetail>(new Action<ReceiveNoteDetail>(this.attach_ReceiveNoteDetails), new Action<ReceiveNoteDetail>(this.detach_ReceiveNoteDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._PartyMaster = default(EntityRef<PartyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNMId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RNMId
		{
			get
			{
				return this._RNMId;
			}
			set
			{
				if ((this._RNMId != value))
				{
					this.OnRNMIdChanging(value);
					this.SendPropertyChanging();
					this._RNMId = value;
					this.SendPropertyChanged("RNMId");
					this.OnRNMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyId", DbType="BigInt")]
		public System.Nullable<long> PartyId
		{
			get
			{
				return this._PartyId;
			}
			set
			{
				if ((this._PartyId != value))
				{
					if (this._PartyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartyIdChanging(value);
					this.SendPropertyChanging();
					this._PartyId = value;
					this.SendPropertyChanged("PartyId");
					this.OnPartyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNNo", DbType="NVarChar(50)")]
		public string RNNo
		{
			get
			{
				return this._RNNo;
			}
			set
			{
				if ((this._RNNo != value))
				{
					this.OnRNNoChanging(value);
					this.SendPropertyChanging();
					this._RNNo = value;
					this.SendPropertyChanged("RNNo");
					this.OnRNNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(1000)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiveNoteMaster_InwardMaster", Storage="_InwardMasters", ThisKey="RNMId", OtherKey="RNMId")]
		public EntitySet<InwardMaster> InwardMasters
		{
			get
			{
				return this._InwardMasters;
			}
			set
			{
				this._InwardMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiveNoteMaster_ReceiveNoteDetail", Storage="_ReceiveNoteDetails", ThisKey="RNMId", OtherKey="RNMId")]
		public EntitySet<ReceiveNoteDetail> ReceiveNoteDetails
		{
			get
			{
				return this._ReceiveNoteDetails;
			}
			set
			{
				this._ReceiveNoteDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_ReceiveNoteMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.ReceiveNoteMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.ReceiveNoteMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartyMaster_ReceiveNoteMaster", Storage="_PartyMaster", ThisKey="PartyId", OtherKey="PartyId", IsForeignKey=true)]
		public PartyMaster PartyMaster
		{
			get
			{
				return this._PartyMaster.Entity;
			}
			set
			{
				PartyMaster previousValue = this._PartyMaster.Entity;
				if (((previousValue != value) 
							|| (this._PartyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartyMaster.Entity = null;
						previousValue.ReceiveNoteMasters.Remove(this);
					}
					this._PartyMaster.Entity = value;
					if ((value != null))
					{
						value.ReceiveNoteMasters.Add(this);
						this._PartyId = value.PartyId;
					}
					else
					{
						this._PartyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("PartyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.ReceiveNoteMaster = this;
		}
		
		private void detach_InwardMasters(InwardMaster entity)
		{
			this.SendPropertyChanging();
			entity.ReceiveNoteMaster = null;
		}
		
		private void attach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.ReceiveNoteMaster = this;
		}
		
		private void detach_ReceiveNoteDetails(ReceiveNoteDetail entity)
		{
			this.SendPropertyChanging();
			entity.ReceiveNoteMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RewinderDetail")]
	public partial class RewinderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RewDId;
		
		private System.Nullable<long> _RewId;
		
		private string _RewNo;
		
		private System.Nullable<decimal> _Size;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<bool> _IsUse;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntitySet<ConsumptionDetail> _ConsumptionDetails;
		
		private EntityRef<RewinderMaster> _RewinderMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRewDIdChanging(long value);
    partial void OnRewDIdChanged();
    partial void OnRewIdChanging(System.Nullable<long> value);
    partial void OnRewIdChanged();
    partial void OnRewNoChanging(string value);
    partial void OnRewNoChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnIsUseChanging(System.Nullable<bool> value);
    partial void OnIsUseChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public RewinderDetail()
		{
			this._ConsumptionDetails = new EntitySet<ConsumptionDetail>(new Action<ConsumptionDetail>(this.attach_ConsumptionDetails), new Action<ConsumptionDetail>(this.detach_ConsumptionDetails));
			this._RewinderMaster = default(EntityRef<RewinderMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewDId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RewDId
		{
			get
			{
				return this._RewDId;
			}
			set
			{
				if ((this._RewDId != value))
				{
					this.OnRewDIdChanging(value);
					this.SendPropertyChanging();
					this._RewDId = value;
					this.SendPropertyChanged("RewDId");
					this.OnRewDIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewId", DbType="BigInt")]
		public System.Nullable<long> RewId
		{
			get
			{
				return this._RewId;
			}
			set
			{
				if ((this._RewId != value))
				{
					if (this._RewinderMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRewIdChanging(value);
					this.SendPropertyChanging();
					this._RewId = value;
					this.SendPropertyChanged("RewId");
					this.OnRewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewNo", DbType="NVarChar(50)")]
		public string RewNo
		{
			get
			{
				return this._RewNo;
			}
			set
			{
				if ((this._RewNo != value))
				{
					this.OnRewNoChanging(value);
					this.SendPropertyChanging();
					this._RewNo = value;
					this.SendPropertyChanged("RewNo");
					this.OnRewNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUse", DbType="Bit")]
		public System.Nullable<bool> IsUse
		{
			get
			{
				return this._IsUse;
			}
			set
			{
				if ((this._IsUse != value))
				{
					this.OnIsUseChanging(value);
					this.SendPropertyChanging();
					this._IsUse = value;
					this.SendPropertyChanged("IsUse");
					this.OnIsUseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewinderDetail_ConsumptionDetail", Storage="_ConsumptionDetails", ThisKey="RewDId", OtherKey="RDId")]
		public EntitySet<ConsumptionDetail> ConsumptionDetails
		{
			get
			{
				return this._ConsumptionDetails;
			}
			set
			{
				this._ConsumptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewinderMaster_RewinderDetail", Storage="_RewinderMaster", ThisKey="RewId", OtherKey="RewId", IsForeignKey=true)]
		public RewinderMaster RewinderMaster
		{
			get
			{
				return this._RewinderMaster.Entity;
			}
			set
			{
				RewinderMaster previousValue = this._RewinderMaster.Entity;
				if (((previousValue != value) 
							|| (this._RewinderMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RewinderMaster.Entity = null;
						previousValue.RewinderDetails.Remove(this);
					}
					this._RewinderMaster.Entity = value;
					if ((value != null))
					{
						value.RewinderDetails.Add(this);
						this._RewId = value.RewId;
					}
					else
					{
						this._RewId = default(Nullable<long>);
					}
					this.SendPropertyChanged("RewinderMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.RewinderDetail = this;
		}
		
		private void detach_ConsumptionDetails(ConsumptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.RewinderDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RewinderMaster")]
	public partial class RewinderMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RewId;
		
		private System.Nullable<long> _InwId;
		
		private System.Nullable<decimal> _Size;
		
		private System.Nullable<decimal> _RewindeSize;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<RewinderDetail> _RewinderDetails;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
		private EntityRef<InwardMaster> _InwardMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRewIdChanging(long value);
    partial void OnRewIdChanged();
    partial void OnInwIdChanging(System.Nullable<long> value);
    partial void OnInwIdChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnRewindeSizeChanging(System.Nullable<decimal> value);
    partial void OnRewindeSizeChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public RewinderMaster()
		{
			this._RewinderDetails = new EntitySet<RewinderDetail>(new Action<RewinderDetail>(this.attach_RewinderDetails), new Action<RewinderDetail>(this.detach_RewinderDetails));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			this._InwardMaster = default(EntityRef<InwardMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RewId
		{
			get
			{
				return this._RewId;
			}
			set
			{
				if ((this._RewId != value))
				{
					this.OnRewIdChanging(value);
					this.SendPropertyChanging();
					this._RewId = value;
					this.SendPropertyChanged("RewId");
					this.OnRewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InwId", DbType="BigInt")]
		public System.Nullable<long> InwId
		{
			get
			{
				return this._InwId;
			}
			set
			{
				if ((this._InwId != value))
				{
					if (this._InwardMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInwIdChanging(value);
					this.SendPropertyChanging();
					this._InwId = value;
					this.SendPropertyChanged("InwId");
					this.OnInwIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RewindeSize", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> RewindeSize
		{
			get
			{
				return this._RewindeSize;
			}
			set
			{
				if ((this._RewindeSize != value))
				{
					this.OnRewindeSizeChanging(value);
					this.SendPropertyChanging();
					this._RewindeSize = value;
					this.SendPropertyChanged("RewindeSize");
					this.OnRewindeSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RewinderMaster_RewinderDetail", Storage="_RewinderDetails", ThisKey="RewId", OtherKey="RewId")]
		public EntitySet<RewinderDetail> RewinderDetails
		{
			get
			{
				return this._RewinderDetails;
			}
			set
			{
				this._RewinderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_RewinderMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.RewinderMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.RewinderMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InwardMaster_RewinderMaster", Storage="_InwardMaster", ThisKey="InwId", OtherKey="InwId", IsForeignKey=true)]
		public InwardMaster InwardMaster
		{
			get
			{
				return this._InwardMaster.Entity;
			}
			set
			{
				InwardMaster previousValue = this._InwardMaster.Entity;
				if (((previousValue != value) 
							|| (this._InwardMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InwardMaster.Entity = null;
						previousValue.RewinderMasters.Remove(this);
					}
					this._InwardMaster.Entity = value;
					if ((value != null))
					{
						value.RewinderMasters.Add(this);
						this._InwId = value.InwId;
					}
					else
					{
						this._InwId = default(Nullable<long>);
					}
					this.SendPropertyChanged("InwardMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RewinderDetails(RewinderDetail entity)
		{
			this.SendPropertyChanging();
			entity.RewinderMaster = this;
		}
		
		private void detach_RewinderDetails(RewinderDetail entity)
		{
			this.SendPropertyChanging();
			entity.RewinderMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMaster")]
	public partial class UserMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private string _ContactNo;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntityRef<CompanyMaster> _CompanyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public UserMaster()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._CompanyMaster = default(EntityRef<CompanyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(150)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(150)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserPermission", Storage="_UserPermissions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyMaster_UserMaster", Storage="_CompanyMaster", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyMaster CompanyMaster
		{
			get
			{
				return this._CompanyMaster.Entity;
			}
			set
			{
				CompanyMaster previousValue = this._CompanyMaster.Entity;
				if (((previousValue != value) 
							|| (this._CompanyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyMaster.Entity = null;
						previousValue.UserMasters.Remove(this);
					}
					this._CompanyMaster.Entity = value;
					if ((value != null))
					{
						value.UserMasters.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermission")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UPId;
		
		private System.Nullable<long> _UserId;
		
		private System.Nullable<long> _FormId;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private EntityRef<FormMaster> _FormMaster;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUPIdChanging(long value);
    partial void OnUPIdChanged();
    partial void OnUserIdChanging(System.Nullable<long> value);
    partial void OnUserIdChanged();
    partial void OnFormIdChanging(System.Nullable<long> value);
    partial void OnFormIdChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    #endregion
		
		public UserPermission()
		{
			this._FormMaster = default(EntityRef<FormMaster>);
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UPId
		{
			get
			{
				return this._UPId;
			}
			set
			{
				if ((this._UPId != value))
				{
					this.OnUPIdChanging(value);
					this.SendPropertyChanging();
					this._UPId = value;
					this.SendPropertyChanged("UPId");
					this.OnUPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", DbType="BigInt")]
		public System.Nullable<long> FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._FormMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormMaster_UserPermission", Storage="_FormMaster", ThisKey="FormId", OtherKey="FormId", IsForeignKey=true)]
		public FormMaster FormMaster
		{
			get
			{
				return this._FormMaster.Entity;
			}
			set
			{
				FormMaster previousValue = this._FormMaster.Entity;
				if (((previousValue != value) 
							|| (this._FormMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormMaster.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._FormMaster.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._FormId = value.FormId;
					}
					else
					{
						this._FormId = default(Nullable<long>);
					}
					this.SendPropertyChanged("FormMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserPermission", Storage="_UserMaster", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class UserSignInResult
	{
		
		private long _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private string _ContactNo;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private System.Nullable<bool> _IsDelete;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.Nullable<long> _CompanyId;
		
		public UserSignInResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(150)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(150)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this._ContactNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this._AddDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this._EditDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this._IsDelete = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this._DeleteDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
